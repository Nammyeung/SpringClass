<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<context:component-scan base-package="com.ja.aoptest" />
	<!-- 우리가 짠 코드는 annotation을 붙일 수 있음. -->
	
	
	<!-- <beans:bean class = "com.ja.aoptest.BoardController">
	</beans:bean> -->
	
	<!-- <beans:bean class = "com.ja.aoptest.BoardServiceImpl">
		<beans:property name="boardDao" ref="aaa"></beans:property>
	</beans:bean>
	annotation이 아니라서 문법적으로 setter가 필요함.
	<beans:bean id = "aaa" class = "com.ja.aoptest.BoardDao">
	
	</beans:bean> -->
	<!-- 프로젝트 중에 beans 100개 등록 -->
	
	<beans:bean id = "log" class = "com.ja.aoptest.LogAdvice">
	</beans:bean>
	
	<!-- 
	<aop:config> 포인트컷 설정하는 부분
		<aop:pointcut expression="execution(* com.ja.aoptest..*Impl.*(..))" id = "allPointcut"/>
		어떤 메소드가 실행될 때
		void or * : 리턴타입
		com.ja하위에 있는 모든 class가 pointcut 대상
		<aop:aspect ref = "log"> 결합
			<aop:after method="printAfterLog" pointcut-ref="allPointcut"/>
			<aop:before method="printLog" pointcut-ref="allPointcut"/>		
			
		<aop:around method="aroundLog" pointcut-ref = "allPointcut"/>
			메소드를 조심해서 만들어야 한다.
			프로젝트를 이용해서 around만 한 번 이용
		</aop:aspect>
	</aop:config>
	-->



</beans:beans>
